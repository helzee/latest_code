import java.util.Collections;
import java.util.Vector;

public class VoronoiDiagram {
   public VoronoiDiagram(int size_x, int size_y, Vector<Point> points) {
      divide(size_x, size_y, points, 0, points.size() - 1);
   }

   private void divide(int size_x, int size_y, Vector<Point> points, int lower, int upper) {
      int size = upper - lower + 1;

      if (size > 2) {
         int mid = lower + size / 2;
         divide(size_x, size_y, points, lower, mid - 1);
         divide(size_x, size_y, points, mid, upper);
         stitch(size_x, size_y, points, lower, mid - 1, mid, upper);
      } else {
         // base case
         if (size == 2) {
            // draw a line
            Point p1 = points.elementAt(lower);
            Point p2 = points.elementAt(upper);

            Line bisector = bisectorLine(size_x, size_y, p1, p2);

            if (p2.y < p1.y) {
               // swap to sort
               Collections.swap(points, lower, upper);
            }
            p1 = points.elementAt(lower);
            p1.insertLine(bisector);
         }
         return;
      }
   }

   private void stitch(int size_x, int size_y, Vector<Point> points,
         int leftL, int leftU, int rightL, int rightU) {
      // choose the lowest point from left and right.
      // ISSUE: lowest point does not mean starting point for stitch. need to merge convex hulls to find lowest bridge
      Point p1 = points.elementAt(leftL);
      Point p2 = points.elementAt(rightL);

      double srcX = 0.0;
      double srcY = 0.0;
      double endX = 0.0;
      double endY = 0.0;

      do {
         // 1. get a bisector line between them.
         Line bisector = bisectorLine(size_x, size_y, p1, p2);

         // 2. adjust the src point
         srcX = (endX == 0.0 && endY == 0.0) ? ((bisector.y1 < bisector.y2) ? bisector.x1 : bisector.x2) : endX;
         srcY = (endX == 0.0 && endY == 0.0) ? ((bisector.y1 < bisector.y2) ? bisector.y1 : bisector.y2) : endY;

         // 3. compute the intersect with the bottom voronoi edges.
         // ISSUE: Only taking 0th line from point. points can  have mulitple lines
         // to prevent extended search times for lines, we can separate finished lines (those with bounds) and unfinished lines (unbounded)
         double[] its1 = (p1.lines.size() > 0) ? intersect(bisector, p1.lines.elementAt(0)) : null;
         double[] its2 = (p2.lines.size() > 0) ? intersect(bisector, p2.lines.elementAt(0)) : null;

         // 4. find which of the two intersects with the bisector line is closer to the
         // source point
         // MAJOR ISSUE: cant measure distance from src points because these could be above an intersection (this happens when drawing the bisector of the lowest convex hull bridge)
         double dist1 = (its1 != null) ? distance(its1[0], its1[1], srcX, srcY) : Double.MAX_VALUE;
         double dist2 = (its2 != null) ? distance(its2[0], its2[1], srcX, srcY) : Double.MAX_VALUE;

         System.out.println("dist1=" + dist1 + ", dist2=" + dist2);
         if (its1 == null && its2 == null) {
            endY = size_y;
            endX = (endY - bisector.b) / bisector.a;
         } else {
            endX = (dist1 < dist2) ? its1[0] : its2[0];
            endY = (dist1 < dist2) ? its1[1] : its2[1];
         }

         // 5. cut off the bisector line to the last intersection
         bisector.x1 = srcX;
         bisector.y1 = srcY;
         bisector.x2 = endX;
         bisector.y2 = endY;
         System.out.println("bisector line: [" + srcX + "," + srcY + "]-->[" + endX + "," + endY + "]");

         // 6. cut off the voronoi edge at the intersection
         if (its1 != null || its2 != null) {
            if (dist1 < dist2) {
               p1.lines.elementAt(0).x2 = endX;
               p1.lines.elementAt(0).y2 = endY;
            } else {
               p2.lines.elementAt(0).x1 = endX;
               p2.lines.elementAt(0).y1 = endY;
            }
         }

         if (dist1 < dist2)
            p1.insertLine(bisector);
         else
            p2.insertLine(bisector);

         // 7. choose the next point from the same side that keeps the last voronoi edge
         // ISSUE the points we care about are along the convex hull within the stitch. This traverses all points
         if (dist1 < dist2) {
            if (leftL < leftU)
               p1 = points.elementAt(++leftL);
            else if (rightL < rightU)
               p2 = points.elementAt(++rightL);
            else
               break;
         } else {
            if (rightL < rightU)
               p2 = points.elementAt(++rightL);
            else if (leftL < leftU)
               p1 = points.elementAt(++leftL);
            else
               break;
         }
      } while (true);
   }

   private Line bisectorLine(int size_x, int size_y, Point p1, Point p2) {

      double mid_x = Math.abs(p1.x + p2.x) / 2;
      double mid_y = Math.abs(p1.y + p2.y) / 2;

      double slope = (double) (p2.y - p1.y) / (double) (p2.x - p1.x);
      double perpendicular_slope = -1 / slope;

      double intersect = mid_y - perpendicular_slope * mid_x;

      // generate a bisector line
      // compute x1, y1
      double x1 = 0.0;
      double y1 = intersect;
      // compute x2, y2
      double x2 = size_x;
      double y2 = perpendicular_slope * x2 + intersect;

      return new Line(x1, y1, x2, y2);
   }

   private double[] intersect(Line l1, Line l2) {
      double a1 = (double) (l1.y2 - l1.y1) / (double) (l1.x2 - l1.x1);
      double b1 = l1.y1 - a1 * l1.x1;

      double a2 = (double) (l2.y2 - l2.y1) / (double) (l2.x2 - l2.x1);
      double b2 = l2.y1 - a1 * l2.x1;

      double[] i = new double[2];
      i[0] = (b2 - b1) / (a1 - a2);
      i[1] = i[0] * a1 + b1;

      return i;
   }

   private double distance(double x1, double y1, double x2, double y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2.0) + Math.pow(y2 - y1, 2.0));
   }
}
